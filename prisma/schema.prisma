generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

//
// ENUMS
//
enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum UserTier {
  BASIC
  SILVER
  GOLD
  PLATINUM
}

enum TransactionType {
  CREDIT
  DEBIT
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum WithdrawalStatus {
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

//
// USERS
//
model users {
  id           Int             @id @default(autoincrement())
  fullname     String          @db.VarChar(255)
  email        String?         @unique @db.VarChar(255)
  phone        String          @unique @db.VarChar(255)
  status       UserStatus?     @default(ACTIVE)
  tier         UserTier        @default(BASIC)
  password     String          @db.VarChar(255)
  roles        UserRole        @default(USER)
  refreshToken String?         @db.VarChar(255)
  fcmToken     String?         @db.VarChar(255)
  isVerified   Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // relationships
  profile       userProfile?
  wallet        wallet?
  notifications notifications[]
  kyc           kycVerification?
  bankAccounts  bankAccount[]
  withdrawals   withdrawalRequest[]
  deposits      depositRecord[]
  tierHistory   userTierHistory[]
  auditLogs     auditLog[]
  supportTickets supportTickets[]

  @@map("users")
}

//
// USER PROFILE
//
model userProfile {
  id          Int          @id @default(autoincrement())
  userId      Int          @unique @map("user_id")
  firstName   String?      @db.VarChar(255)
  middleName  String?      @db.VarChar(255)
  lastName    String?      @db.VarChar(255)
  address     String?      @db.VarChar(255)
  status      UserStatus?  @default(ACTIVE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profile")
}

//
// WALLET
//
model wallet {
  id        Int       @id @default(autoincrement())
  userId    Int       @unique @map("user_id")
  balance   Decimal   @default(0.00) @db.Decimal(20, 2)
  currency  String    @default("NGN") @db.VarChar(10)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user          users          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions  transactions[]

  @@map("wallet")
}

//
// TRANSACTIONS
//
model transactions {
  id            Int                @id @default(autoincrement())
  walletId      Int                @map("wallet_id")
  type          TransactionType
  amount        Decimal            @db.Decimal(20, 2)
  reference     String             @unique @db.VarChar(255)
  status        TransactionStatus  @default(PENDING)
  description   String?            @db.VarChar(255)
  createdAt     DateTime           @default(now())

  wallet wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

//
// NOTIFICATIONS
//
model notifications {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  title       String    @db.VarChar(255)
  message     String    @db.VarChar(1000)
  isRead      Boolean   @default(false)
  createdAt   DateTime  @default(now())

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

//
// KYC VERIFICATION
//
model kycVerification {
  id            Int        @id @default(autoincrement())
  userId        Int        @unique @map("user_id")
  bvn           String?    @unique @db.VarChar(20)
  nin           String?    @unique @db.VarChar(20)
  idType        String?    @db.VarChar(100) // e.g. "National ID", "Driver's License"
  idNumber      String?    @db.VarChar(100)
  idImageUrl    String?    @db.VarChar(500)
  selfieUrl     String?    @db.VarChar(500)
  status        KycStatus  @default(PENDING)
  verifiedAt    DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("kyc_verification")
}

//
// BANK ACCOUNT
//
model bankAccount {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  bankName      String    @db.VarChar(255)
  accountNumber String    @db.VarChar(50)
  accountName   String    @db.VarChar(255)
  isPrimary     Boolean   @default(false)
  createdAt     DateTime  @default(now())

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawalRequests withdrawalRequest[]

  @@map("bank_account")
}

//
// WITHDRAWAL REQUEST
//
model withdrawalRequest {
  id            Int               @id @default(autoincrement())
  userId        Int               @map("user_id")
  amount        Decimal           @db.Decimal(20, 2)
  reference     String            @unique @db.VarChar(255)
  status        WithdrawalStatus  @default(PENDING)
  bankAccountId Int?
  processedAt   DateTime?
  createdAt     DateTime          @default(now())

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)
  bankAccount bankAccount? @relation(fields: [bankAccountId], references: [id])

  @@map("withdrawal_request")
}

//
// DEPOSIT RECORD
//
model depositRecord {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  amount      Decimal   @db.Decimal(20, 2)
  reference   String    @unique @db.VarChar(255)
  status      TransactionStatus @default(PENDING)
  gateway     String    @db.VarChar(255)
  createdAt   DateTime  @default(now())

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("deposit_record")
}

//
// USER TIER HISTORY
//
model userTierHistory {
  id          Int        @id @default(autoincrement())
  userId      Int        @map("user_id")
  oldTier     UserTier?
  newTier     UserTier
  changedBy   String?    @db.VarChar(255) // admin who changed it
  reason      String?    @db.VarChar(255)
  createdAt   DateTime   @default(now())

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_tier_history")
}

//
// TRANSACTION LIMITS PER TIER
//
model transactionLimit {
  id           Int        @id @default(autoincrement())
  tier         UserTier   @unique
  dailyLimit   Decimal    @db.Decimal(20, 2)
  monthlyLimit Decimal    @db.Decimal(20, 2)
  singleTxLimit Decimal   @db.Decimal(20, 2)
  createdAt    DateTime   @default(now())

  @@map("transaction_limit")
}

//
// AUDIT LOG
//
model auditLog {
  id          Int       @id @default(autoincrement())
  userId      Int?      @map("user_id")
  action      String    @db.VarChar(255)
  description String?   @db.VarChar(1000)
  ipAddress   String?   @db.VarChar(100)
  createdAt   DateTime  @default(now())

  user users? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_log")
}

//
// PLATFORM SETTINGS
//
model settings {
  id          Int       @id @default(autoincrement())
  key         String    @unique @db.VarChar(255)
  value       String    @db.VarChar(1000)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("settings")
}

model supportTickets {
  id          Int       @id @default(autoincrement())
  userId      Int       @map("user_id")
  subject     String    @db.VarChar(255)
  description String    @db.VarChar(1000)
  status      String    @default("open") // open, resolved, closed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("support_tickets")
}
